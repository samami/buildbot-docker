# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [worker.Worker("example-worker", 'pass')]

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type' : 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel' : 'BUILDBOT_MQ_DEBUG' in os.environ,
    }
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://github.com/buildbot/pyflakes.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["runtests"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["runtests"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

factory = util.BuildFactory()
# check out the source
factory.addStep(steps.Git(repourl='http://github.com/buildbot/pyflakes.git', mode='incremental'))
# run the tests (note that this will require that 'trial' is installed)
factory.addStep(steps.ShellCommand(command=["trial", "pyflakes"]))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="runtests",
      workernames=["example-worker"],
      factory=factory))

####### REPORTER TARGETS

# 'services' is a list of Reporter Targets. The results of each build will be
# pushed to these targets. buildbot/reporters/*.py has a variety to choose from,
# like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Pyflakes"
c['titleURL'] = "https://launchpad.net/pyflakes"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}

# from buildbot.plugins import *

# # This is the dictionary that the buildmaster pays attention to. We also use a shorter alias to save typing.
# c = BuildmasterConfig = {}

# ####### WORKERS

# # The 'workers' list defines the set of recognized workers. Each element is a Worker object, specifying a unique worker
# # name and password. The same worker name and password must be configured on the worker. Note that {buildbot_worker_name}
# # and {buildbot_worker_password} are placeholders and replaced by the values in ci.yaml
c['workers'] = [
    # these workers have no access from the outside world, so won't work for anything that uses webhooks etc
    worker.LocalWorker('local_worker_1', properties={'http_port': 8070, 'https_port': 8071, 'mysql_port': 8072, 'chat_port': 8073, 'memcached_port': 8074, 'testing': 'true'}),
    worker.LocalWorker('local_worker_2', properties={'http_port': 8060, 'https_port': 8061, 'mysql_port': 8062, 'chat_port': 8063, 'memcached_port': 8064, 'testing': 'true'}),
    worker.LocalWorker('local_worker_3'),
    # this worker is reachable using http port 8080 / https port 8081 of the buildbot instance, and is used for anything
    # that needs to push to the instance (e.g. webhooks for credit card gateways etc).
    worker.LocalWorker('worker_with_public_ip', properties={'http_port': 8080, 'https_port': 8081, 'mysql_port': 3307, 'chat_port': 7224, 'memcached_port': 11211, 'hostname': '{ci_domain}', 'testing': 'false'}),
]

# # 'protocols' contains information about protocols which master will use for
# # communicating with workers. You must define at least 'port' option that workers
# # could connect to your master with this protocol.
# # 'port' must match the value configured into the workers (with their
# # --master option)
# c['protocols'] = {'pb': {'port': 9989}}

# ####### CHANGESOURCES

# # The 'change_source' setting tells the buildmaster how it should find out about source code changes. This is empty as
# # we use github notifications to trigger builds.
# c['change_source'] = []

# ####### SCHEDULERS

# # Configure the Schedulers, which decide how to react to incoming changes.
# c['schedulers'] = []
# # Map webmodule repository to the "codecept" builder
# c['schedulers'].append(schedulers.SingleBranchScheduler(
#   name="Test Webmodule (all branches)",
#   change_filter=util.ChangeFilter(
#     filter_fn=lambda change: change.properties.getProperty('github_distinct') and change.project == 'PatronBase/webmodule'
#   ),
#   treeStableTimer=None,
#   builderNames=["Test core functionality", "Test gateways"])
# )
# # deploy alpha/beta to servers
# c['schedulers'].append(schedulers.SingleBranchScheduler(
#   name="Deploy Webmodule (alpha/beta)",
#   change_filter=util.ChangeFilter(project='PatronBase/webmodule', branch=["alpha", "beta"]),
#   treeStableTimer=None,
#   builderNames=["deploy_alpha_beta"])
# )
# # Map manual (patronbase guides) repository to the "deploy_guides" builder
# c['schedulers'].append(schedulers.SingleBranchScheduler(
#   name="Deploy PatronBase guides (master/beta)",
#   change_filter=util.ChangeFilter(project='PatronBase/manual', branch=["master", "beta"]),
#   treeStableTimer=None,
#   builderNames=["deploy_guides"])
# )

# ####### BUILDERS

# # The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# # what steps, and which workers can execute them.  Note that any particular build will
# # only take place on one worker.

# # Codecept building steps
# codecept = util.BuildFactory([
#   # check out the source
#   steps.ShellSequence(
#     name="Clean up docker state",
#     description="Stops any stuck containers and removes temporary files created by docker and owned by root",
#     commands=[
#       util.ShellArg(command="docker ps -a | grep $COMPOSE_PROJECT_NAME | awk '{print $1}' | xargs --no-run-if-empty docker stop", logfile="stop containers"),
#     ],
#     haltOnFailure=True
#   ),
#   steps.ShellSequence(
#     name="Checkout",
#     commands=[
#       # download repo archive
#       util.ShellArg(command=["curl", "-H", "Authorization: token {github_api_token}", "-L", util.Interpolate("%(prop:repository)s/tarball/%(prop:revision)s"), "-o", "repo.tar.gz"], logfile="curl", haltOnFailure=True),
#       # uncompress archive, creates PatronBase-webmodule-<revision>/*
#       util.ShellArg(command=["tar", "-xzf", "repo.tar.gz", "--strip-components=1"], logfile="uncompress", haltOnFailure=True),
#       # remove temporary files
#       util.ShellArg(command=["rm", "-f", "repo.tar.gz"], logfile="cleanup", haltOnFailure=True),
#     ],
#     haltOnFailure=True
#   ),
#   steps.ShellSequence(
#     name="Set up env",
#     commands=[
#       # TESTING=false causes ports to be ignored when generating URLs, which is sometimes needed for external gatways
#       util.ShellArg(command=util.Interpolate("echo \"version: '2.1'\nservices:\n  php:\n    environment:\n      TESTING: '%(prop:testing)s'\" > docker-compose.ci.yaml")),
#       util.ShellArg(command=["cp", ".env.development-defaults", ".env"]),
#       # mysql on the server is already listening on 3306, so use next available port
#       util.ShellArg(command=util.Interpolate("echo 'HTTP_PORT=%(prop:http_port)s\nHTTPS_PORT=%(prop:https_port)s\nMYSQL_PORT=%(prop:mysql_port)s\nCHAT_PORT=%(prop:chat_port)s\nMEMCACHED_PORT=%(prop:memcached_port)s' >> .env")),
#       util.ShellArg(command="echo SENTRY_DSN=https://d3a205492a844c6a83d5ee1c74dd7b07@o451674.ingest.sentry.io/5437917 >> .env"),
#     ],
#     haltOnFailure=True
#   ),
#   steps.ShellSequence(
#     name="Install JS requirements",
#     commands=[
#       util.ShellArg(command=["yarn", "install", "--verbose"], logfile="yarn", haltOnFailure=True),
#       util.ShellArg(command=["gulp", "prod"], logfile="gulp", haltOnFailure=True),
#     ],
#     haltOnFailure=True
#   ),
#   # get AWS ECR login
#   steps.ShellCommand(name="Authorize with AWS ECR", command="$(aws ecr get-login --region ap-southeast-2 | sed 's/-e none//')", haltOnFailure=True),
#   steps.ShellSequence(
#     name="Start docker",
#     commands=[
#       util.ShellArg(command=["docker-compose", "-f", "docker-compose.yaml", "-f", "docker-compose.ci.yaml", "up", "--remove-orphans", "--build", "--detach"], logfile="start containers", haltOnFailure=True),
#       util.ShellArg(command=["/usr/local/bin/wait-for-healthcheck.sh", util.Interpolate("%(prop:http_port)s")], logfile="wait for containers", haltOnFailure=True),
#     ],
#     haltOnFailure=True,
#     maxTime=600
#   ),
#   steps.Test(
#     name="Run codeception tests",
#     command=[
#         "codecept.phar",
#         "run",
#         # groups to skip/groups to run -- syntax is "%(prod:<prop name>?|<sub_if_exists>|<sub_if_missing>)s"
#         # if skip_groups property is specified, then it adds --skip-groups=..., otherwise it adds --groups=...
#         util.Interpolate("--%(prop:skip_group:?|skip-group|group)s"),
#         util.Interpolate("%(prop:skip_group:?|%(prop:skip_group)s|%(prop:group)s)s"),
#         "--debug",
#         "--html",
#         "--override",
#         util.Interpolate("suites: acceptance: modules: config: WebDriver: url: https://%(prop:hostname:-localhost)s:%(prop:https_port)s/"),
#     ],
#     haltOnFailure=True
#   ),
#   steps.DirectoryUpload(
#     name="Upload results",
#     workersrc="tests/_output/",
#     masterdest=util.Interpolate("/var/www/output/%(prop:buildnumber)s-%(prop:revision)s"),
#     url=util.Interpolate("/output/%(prop:buildnumber)s-%(prop:revision)s/report.html"),
#     urlText="Codeception report and results",
#     alwaysRun=True
#   ),
#   # steps.Trigger(
#   #   name="Deploy changes to alpha/beta servers",
#   #   schedulerNames=['Deploy Webmodule (alpha/beta)'],
#   #   waitForFinish=True,
#   #   doStepIf=lambda step: step.build.getProperty('branch') == "alpha" or step.build.getProperty('branch') == "beta"
#   # ),
#   steps.ShellSequence(
#     name="Clean up",
#     description="Stops any stuck containers and removes temporary files created by docker and owned by root",
#     commands=[
#       util.ShellArg(command=["docker-compose", "rm", "-s", "-f", "-v"], logfile="stop containers"),
#       util.ShellArg(command=["sudo", "rm", "-Rf", util.Interpolate("%(prop:builddir)s/build")], logfile="remove build dir"),
#     ],
#     alwaysRun=True
#   ),
# ])

# # Webmodule: update alpha/beta servers
# deploy_alpha_beta = util.BuildFactory([
#   steps.ShellSequence(
#     name="Clone deployment repo",
#     commands=[
#       # download repo archive
#       util.ShellArg(
#         command=["curl", "-H", "Authorization: token {github_api_token}", "-L", "https://github.com/PatronBase/deployment/tarball/master", "-o", "repo.tar.gz"],
#         logfile="Download deployment repo",
#         haltOnFailure=True
#       ),
#       # uncompress archive, creates PatronBase-deployment-<revision>/*
#       util.ShellArg(
#         command=["tar", "-xzf", "repo.tar.gz", "--strip-components=1"],
#         logfile="Uncompress",
#         haltOnFailure=True
#       ),
#       # remove temporary files
#       util.ShellArg(
#         command=["rm", "-f", "repo.tar.gz"],
#         logfile="Cleanup",
#         haltOnFailure=True
#       ),
#     ],
#     haltOnFailure=True
#   ),
#   # get SSH settings ready
#   steps.ShellSequence(
#     name="Set up environment",
#     commands=[
#       util.ShellArg(
#         command=[
#           "ruby",
#           "-r",
#           "erb",
#           "-r",
#           "ostruct",
#           "-e",
#           "File.write('ssh-config', ERB.new(File.read('common/vagrant/ssh/config.erb')).result(OpenStruct.new(identity_file: '/opt/buildbot-master/master/keys/webmodule/support-patronbase-com').instance_eval { binding }))",
#         ],
#         logfile="Create SSH config file",
#         haltOnFailure=True
#       ),
#       util.ShellArg(
#         command=["chmod", "0600", "/opt/buildbot-master/master/keys/webmodule/support-patronbase-com"],
#         logfile="Fix SSH key permissions",
#         haltOnFailure=True
#       ),
#     ],
#     haltOnFailure=True
#   ),
#   # run deploy script to connect to each instance in parallel and update server.
#   steps.ShellCommand(
#     name=util.Interpolate("Update -%(prop:branch)s server"),
#     command=util.Interpolate("webmodule/tools/update-%(prop:branch)s.sh"),
#     env={
#       "SSH": util.Interpolate("ssh -F %(prop:builddir)s/build/ssh-config"),
#     },
#     haltOnFailure=True
#   ),
# ])

# # PatronBase guides building steps
# deploy_guides = util.BuildFactory([
#   steps.ShellCommand(
#     name="Fix SSH key permissions",
#     command=["chmod", "0600", "/opt/buildbot-master/master/keys/manual/jeremy-guides-patronbase-com"],
#     haltOnFailure=True
#   ),
#   # connect to patronbase-guides instance and run deploy script
#   steps.ShellCommand(
#     name="Update guides website",
#     command=["ssh", "-i", "/opt/buildbot-master/master/keys/manual/jeremy-guides-patronbase-com", "jeremy@guides.patronbase.com", "/usr/local/bin/deploy.sh"],
#     haltOnFailure=True
#   ),
# ])

# c['builders'] = []
# c['builders'].append(
#   util.BuilderConfig(
#     name="Test core functionality",
#     workernames=["local_worker_1", "local_worker_2"],
#     factory=codecept,
#     env={'COMPOSE_PROJECT_NAME': util.Interpolate("core_%(prop:workername)s")},
#     properties={'skip_group': 'gateways'}
#   )
# )
# c['builders'].append(
#   util.BuilderConfig(
#     name="Test gateways",
#     workernames=["worker_with_public_ip"],
#     factory=codecept,
#     env={'COMPOSE_PROJECT_NAME': util.Interpolate("gateways_%(prop:workername)s")},
#     properties={'group': 'gateways'}
#   )
# )
# c['builders'].append(
#   util.BuilderConfig(
#     name="deploy_alpha_beta",
#     workernames=["local_worker_3"],
#     factory=deploy_alpha_beta
#   )
# )
# c['builders'].append(
#   util.BuilderConfig(
#     name="deploy_guides",
#     workernames=["local_worker_3"],
#     factory=deploy_guides
#   )
# )

# ####### BUILDBOT SERVICES

# # 'services' is a list of BuildbotService items like reporter targets. The
# # status of each build will be pushed to these targets. buildbot/reporters/*.py
# # has a variety to choose from, like IRC bots.
# c['services'] = []

# # GitHub status notification
# context = util.Interpolate("buildbot/%(prop:buildername)s")
# github_status_push = reporters.GitHubStatusPush(token='{github_api_token}',
#   context=context,
#   startDescription='Build started.',
#   endDescription='Build done.'
# )
# c['services'].append(github_status_push)

# ####### PROJECT IDENTITY

# # the 'title' string will appear at the top of this buildbot installation's
# # home pages (linked to the 'titleURL').

# c['title'] = "PatronBase CI"
# c['titleURL'] = "https://{buildbot_domain}/"
# c['buildbotNetUsageData'] = None

# # the 'buildbotURL' string should point to the location where the buildbot's
# # internal web server is visible. This typically uses the port number set in
# # the 'www' entry below, but with an externally-visible host name which the
# # buildbot cannot figure out without some help.

# c['buildbotURL'] = c['titleURL']

# # minimalistic config to activate new web UI
# c['www'] = dict(port=8010, plugins=dict(console_view={}, grid_view={}))

# # Set up authentication rules (i.e. who can access what)
# c['www']['authz'] = util.Authz(
#   # Only allow access to users in the PatronBase organisation
#   allowRules = [
#     util.AnyEndpointMatcher(role="PatronBase")
#   ],
#   # Get roles from GitHub auth
#   roleMatchers = [
#     util.RolesFromGroups()
#   ]
# )

# # Set up GitHub authentication
# c['www']['auth'] = util.GitHubAuth("d95bc85d21d976b32176", "ecd864b3cfcd60c6b1372060f44be1874d43d1a1", autologin=True)

# # GitHub webhook receiver
# c['www']['change_hook_dialects'] = {
#   'github': {
#     'secret': 'bERgd9aT7QSgAs17H5Ix9ZVnn50ZEpWdFUUS7DEpngTBI5ICyBt7KfJrNaN8',
#     'token': '{github_api_token}',
#     'strict': True,
#   }
# }

# ####### DATABASE CONFIGURATION

# c['db'] = {
#   # This specifies what database buildbot uses to store its state.
#   # It's easy to start with sqlite, but it's recommended to switch to a dedicated
#   # database, such as PostgreSQL or MySQL, for use in production environments.
#   # http://docs.buildbot.net/current/manual/configuration/global.html#database-specification
#   'db_url' : "mysql://buildbot@localhost/buildbot?max_idle=300",
# }
